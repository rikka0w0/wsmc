plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
}

apply from: '../common.gradle'

project.ext.mod_id = project.archives_base_name;

// These are defined in ../common.properties
version = project.mod_version
group = project.dev_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archives_base_name

// Mojang ships Java 17 to end users in 1.18+
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: project.minecraft_version // defined in ../fabric/gradle.properties
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	// This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
	// It is REQUIRED to be set to true for this template to function.
	// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
	copyIdeResources = true

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
		configureEach {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
    	ext.refMap = 'wsmc.refmap.json'
        java {
            srcDir "../src/main/java"
        }
        resources {
            srcDir "../src/main/resources"
            srcDir "../src/generated/resources"
            exclude '.cache'
            exclude 'Thumbs.db'
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:'+ project.minecraft_version + '-' + project.forge_version

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // Apply Mixin AP
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"

    // MixinExtra
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }

    // Netty's http and websocket support
    minecraftLibrary(group: 'io.netty', name: 'netty-codec-http', version: project.netty_version) {
    	exclude(group: 'io.netty')
    }

    // Pack io.netty:netty-codec-http in the mod jar
    jarJar(group: 'io.netty', name: 'netty-codec-http', version: "[${project.netty_version_min}, ${project.netty_version_max})") {
    	jarJar.pin(it, project.netty_version)
    	exclude(group: 'io.netty')
    }
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'wsmc.refmap.json'
    config 'wsmc.mixins.json'
    
    debug.verbose = true
    debug.export = false
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
	version version
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": "Rikka0w0",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor" :"Rikka0w0",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
	finalizedBy 'reobfJar'
}
jar.archiveClassifier = 'forge-slim';

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version_range: minecraft_version_range,
			forge_version_range: forge_version_range,
			loader_version_range: loader_version_range,
			mod_id: mod_id,
			mod_version: mod_version,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jarJar.enable()
tasks.jarJar {
    archiveClassifier.set('forge')
}
